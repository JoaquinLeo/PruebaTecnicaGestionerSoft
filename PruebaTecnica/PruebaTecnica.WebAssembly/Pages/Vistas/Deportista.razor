@page "/Deportista"
@page "/Deportista/{Id:int}"

@inject INacionalidadServicio nacionalidadServicio
@inject IDeporteServicio deporteServicio
@inject IDeportistaServicio deportistaServicio
@inject IToastService toastService
@inject NavigationManager _navServicio

<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Apellido</span>
                <input type="text" class="form-control" @bind-value="modelo.Apellido">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Edad</span>
                <input type="number" class="form-control" @bind-value="modelo.Edad">
            </div>
            <ValidationMessage For="@(()=>modelo.Edad)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Sexo</span>
                <input type="text" class="form-control" @bind-value="modelo.Sexo">
            </div>
            <ValidationMessage For="@(()=>modelo.Sexo)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Nacionalidad</label>
                <select class="form-select" value="@modelo.IdNacionalidad" @onchange="CambiarNacionalidad">
                    @foreach (var item in nacionalidades)
                    {
                        <option value="@item.IdNacionalidad">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Deporte</label>
                <select class="form-select" value="@modelo.IdDeporte" @onchange="CambiarDeporte">
                    @foreach (var item in deportes)
                    {
                        <option value="@item.IdDeporte">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <label class="input-group-text bg-light">Imagen</label>
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/deportistas" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>




    </div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Titulo = "Nuevo Deportista";
    private string boton = "Crear";
    private List<NacionalidadDTO> nacionalidades = new List<NacionalidadDTO>();
    private List<DeporteDTO> deportes = new List<DeporteDTO>();
    private DeportistaDTO modelo = new DeportistaDTO();

    protected override async Task OnInitializedAsync()
    {
        var respuestaNacionalidades = await nacionalidadServicio.Lista("");
        if (respuestaNacionalidades.EsCorrecto)
        {
            nacionalidades = respuestaNacionalidades.Resultado!;
            if (nacionalidades.Any() && Id == 0)
            {
                modelo.IdNacionalidad = nacionalidades.First().IdNacionalidad;
            }
        }

        var respuestaDeportes = await deporteServicio.Lista("");
        if (respuestaDeportes.EsCorrecto)
        {
            deportes = respuestaDeportes.Resultado!;
            if (deportes.Any() && Id == 0)
            {
                modelo.IdDeporte = deportes.First().IdDeporte;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {

        if (Id != 0)
        {
            Titulo = "Editar Nacionalidad";
            boton = "Actualizar";

            var respuesta = await deportistaServicio.Obtener(Id);
            if (respuesta.EsCorrecto!)
            {
                modelo = (DeportistaDTO)respuesta.Resultado!;
            }
            else
            {
                toastService.ShowWarning(respuesta.Mensaje!);
            }
        }
    }

    void CambiarNacionalidad(ChangeEventArgs e)
    {
        modelo.IdNacionalidad = Convert.ToInt32(e.Value.ToString());
    }

    void CambiarDeporte(ChangeEventArgs e)
    {
        modelo.IdDeporte = Convert.ToInt32(e.Value.ToString());
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);

        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            modelo.Imagen = imageData;
        }
    }

    private async Task GuardarCambios()
    {
        bool respuesta = true;
        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await deportistaServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Deportista Actualizado";
            }
            else
            {
                respuesta = false;
                mensaje = "Deportista no fue actualizado";
            }
        }
        else
        {
            var response = await deportistaServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Deportista Creado";
            }
            else
            {
                respuesta = false;
                mensaje = "Deportista no fue creado";
            }
        }

        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/Deportistas");
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }

    }

}