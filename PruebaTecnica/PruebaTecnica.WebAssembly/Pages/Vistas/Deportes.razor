@page "/Deportes"

@inject IDeporteServicio deporteServicio
@inject IToastService toastService
@inject SweetAlertService SweetAlert

<div class="row justify-content-center  mt-3">
    <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
        <div class="d-grid gap-1 col-12 mx-auto">
            <a class="btn btn-primary" href="/Deporte">Nuevo Deporte</a>
        </div>
    </div>
    <div class="col-sm-6 col-md-8 col-xl-9 mb-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Buscar deporte..." @bind-value="buscar">
            <button class="btn btn-outline-secondary" type="button" @onclick="(async()=> await ObtenerDeportes(buscar))">
                <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    </div>
</div>

<div class="row gx-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 justify-content-start mt-2">


    @if (lista != null)
    {
        foreach (var item in lista)
        {
            <div class="col mb-5">
                <div class="card h-100">
                    <div class="card-body p-4">
                        <div class="text-center">
                            <i class="oi oi-person" style="font-size:50px"></i>
                        </div>
                        <div class="text-center">
                            <p class="m-1"><b>@item.Nombre</b></p>
                        </div>
                        <div class="text-center">
                            <p class="m-1"><b>@item.Tipo</b></p>
                        </div>
                        
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="row justify-content-between">
                            <a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/deporte/@item.IdDeporte"><i class="oi oi-pencil fs-5"></i></a>
                            <button class="col-5 btn btn-sm btn-outline-danger mt-auto" type="button" @onclick="(async () => await Eliminar(item))">
                                <i class="oi oi-trash fs-5"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

        }
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }

</div>


@code {
    private List<DeporteDTO>? lista = null;
    private string buscar = "";

    private async Task ObtenerDeportes(string valor = "")
    {
        var respuesta = await deporteServicio.Lista(valor);
        if (respuesta.EsCorrecto)
        {
            lista = (List<DeporteDTO>)respuesta.Resultado!;
        }
        else
        {
            lista = new List<DeporteDTO>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerDeportes();
    }

    private async Task Eliminar(DeporteDTO modelo)
    {
        SweetAlertResult result = await SweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar deporte: {modelo.Nombre}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var respuesta = await deporteServicio.Eliminar(modelo.IdDeporte);
            if (respuesta.EsCorrecto)
            {
                await ObtenerDeportes();
                toastService.ShowSuccess($"El deporte {modelo.Nombre} fue eliminado");
            }
            else
            {
                toastService.ShowWarning(respuesta.Mensaje!);
            }
        }
    }


}